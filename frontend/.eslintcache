[{"/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/index.js":"1","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/reportWebVitals.js":"2","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/App.js":"3","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/HomePage/Home.js":"4","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/SavedWordsPage/SavedWords.js":"5","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js":"6","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/Tests/Lists.js":"7","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/History/History.js":"8","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/index.js":"9","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/reportWebVitals.js":"10","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/App.js":"11","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/SavedWordsPage/SavedWords.js":"12","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js":"13","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/HomePage/Home.js":"14","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/Tests/Lists.js":"15","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/History/History.js":"16","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/index.js":"17","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/reportWebVitals.js":"18","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/App.js":"19","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/HomePage/Home.js":"20","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/SavedWordsPage/SavedWords.js":"21","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/History/History.js":"22","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/Tests/Lists.js":"23","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js":"24"},{"size":593,"mtime":1613878773959,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1610502522263,"results":"27","hashOfConfig":"26"},{"size":2550,"mtime":1613879975485,"results":"28","hashOfConfig":"26"},{"size":7155,"mtime":1614479691802,"results":"29","hashOfConfig":"26"},{"size":7149,"mtime":1613880632442,"results":"30","hashOfConfig":"26"},{"size":3482,"mtime":1611719695111,"results":"31","hashOfConfig":"26"},{"size":1689,"mtime":1611880066893,"results":"32","hashOfConfig":"26"},{"size":3316,"mtime":1614478807857,"results":"33","hashOfConfig":"26"},{"size":593,"mtime":1613878773959,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1610502522263,"results":"36","hashOfConfig":"35"},{"size":2488,"mtime":1614884241647,"results":"37","hashOfConfig":"35"},{"size":7141,"mtime":1614829169485,"results":"38","hashOfConfig":"35"},{"size":3482,"mtime":1614829169482,"results":"39","hashOfConfig":"35"},{"size":7179,"mtime":1614922965735,"results":"40","hashOfConfig":"35"},{"size":1689,"mtime":1611880066893,"results":"41","hashOfConfig":"35"},{"size":3313,"mtime":1614829236714,"results":"42","hashOfConfig":"35"},{"size":580,"mtime":1615062520239,"results":"43","hashOfConfig":"44"},{"size":362,"mtime":1614966239618,"results":"45","hashOfConfig":"44"},{"size":2366,"mtime":1615062520239,"results":"46","hashOfConfig":"44"},{"size":4462,"mtime":1615066894913,"results":"47","hashOfConfig":"44"},{"size":5163,"mtime":1615064199341,"results":"48","hashOfConfig":"44"},{"size":2539,"mtime":1615066658776,"results":"49","hashOfConfig":"44"},{"size":1689,"mtime":1614966239618,"results":"50","hashOfConfig":"44"},{"size":2829,"mtime":1615066493067,"results":"51","hashOfConfig":"44"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"1otw51o",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"54"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"54"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},"1x61rc7",{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"75"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"75"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"75"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"75"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"75"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"75"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kggeoy",{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"99"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/index.js",[],["112","113"],"/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/reportWebVitals.js",[],"/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/App.js",["114","115","116","117","118","119"],"import { React, useState } from 'react';\nimport {\n  Switch,\n  Route,\n  BrowserRouter,\n  Redirect,\n  useLocation,\n  useHistory,\n} from 'react-router-dom';\nimport { Menu, Layout, Typography } from 'antd';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport Home from './modules/HomePage/Home';\nimport SavedWords from './modules/SavedWordsPage/SavedWords';\nimport History from './modules/History/History';\nimport AddWordModal from './modules/HomePage/subcomponents/SaveWordModal';\nimport Feed from './modules/Tests/Lists';\n\nconst { Header, Content, Footer } = Layout;\nconst { Text } = Typography;\n// the question is what format is the form information being sent in from react\n// it will be sent in a get from here\n// to a get in the backend\n// then the res will have the definition\n// first step is to send the request from here\nfunction App() {\n  let location = useLocation();\n  console.log('location:', location);\n  // let history = useHistory()\n  console.log('location:', location.pathname.split('/'));\n\n  const onMenuClick = (e) => {\n    // console.log('key', e.key);\n  };\n\n  return (\n    <Layout className=\"main-component-layout\">\n      <Header class=\"header-cross-site\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          style={{ lineHeight: '64px' }}\n          onClick={onMenuClick}\n          selectedKeys={[location.pathname.split('/')[1]]}\n        >\n          <Menu.Item key=\"home\">\n            <a href=\"http://localhost:3000/home\">\n              SISWATI TO ENGLISH DICTIONARY\n            </a>\n          </Menu.Item>\n          <Menu.Item key=\"saved\">\n            <a href=\"http://localhost:3000/saved\">Saved Words</a>\n          </Menu.Item>\n          <Menu.Item key=\"history\" style={{ float: 'right' }}>\n            <a href=\"http://localhost:3000/history\">History</a>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      {/* <BrowserRouter> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n        <Route path=\"/home\" component={Home} />;\n        <Route path=\"/saved\" component={SavedWords} />;\n        <Route path=\"/saved/:list\" component={SavedWords} />;\n        <Route path=\"/history\" component={History} />;\n        {/* <Route path=\"/modaltest\" component={AddWordModal} />;\n          <Route path=\"/test\" component={Feed} /> */}\n      </Switch>\n      {/* </BrowserRouter> */}\n\n      <Footer className=\"footer\">\n        <Text className=\"menu-text-color\">©2021 Created by Ndabe Mahluza</Text>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/HomePage/Home.js",["120","121","122","123","124"],"/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/SavedWordsPage/SavedWords.js",["125","126","127","128","129"],"import { React, useEffect, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport {\n  List,\n  Row,\n  Col,\n  Typography,\n  Button,\n  Select,\n  Menu,\n  Dropdown,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport axios from 'axios';\n\nimport './SavedWords.css';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\nconst { Title } = Typography;\nconst { Option } = Select;\n\n// const data = [\n//   {\n//     title: 'Ant Design Title 1',\n//   },\n//   {\n//     title: 'Ant Design Title 2',\n//   },\n// ];\nconst listNames = [];\nconst words = [];\n\nfunction SavedWords() {\n  const [data, setData] = useState([]);\n  const [wordData, setWordData] = useState([]);\n  const [selectedList, setSelectedList] = useState('');\n  const [listRender, setListRender] = useState(false);\n  // const menu = (\n  //   <Menu onClick={onListDel}>\n  //     <Menu.Item key={0}>Delete</Menu.Item>\n  //   </Menu>\n  // );\n  //\n  const history = useHistory();\n  var location = useLocation();\n  var locationArray = location.pathname.split('/');\n  console.log('url:', location.pathname);\n\n  useEffect(() => {\n    instance.get('/lists').then((result) => {\n      //console.log('result1:', result.data.lists);\n      var name;\n      for (name of result.data.lists) {\n        listNames.push({ title: name });\n      }\n\n      setData(listNames);\n      // console.log('data:', data);\n      // itereate\n      // create object with title in it\n      // put\n    });\n\n    console.log('url size:', locationArray.length);\n    // if a list has been selected\n    if (locationArray.length > 2) {\n      var listName = locationArray[3];\n      setSelectedList(listName);\n      setListRender(true);\n      var values = { phoneId: 2, listName: listName };\n      instance.post('/getwords', values).then((result) => {\n        console.log('result2:', result.data.words);\n        var doc;\n        for (doc of result.data.words) {\n          words.push({ id: doc._id, spelling: doc.word });\n        }\n\n        setWordData(words);\n        console.log('data2:', wordData);\n        // itereate\n        // create object with title in it\n        // put\n      });\n    }\n  }, []);\n\n  function onListDel(menuVal) {\n    console.log(menuVal);\n\n    var values = { phoneID: 2, listName: menuVal.key };\n    instance.post('/listdel', values).then((result) => {\n      console.log(result.data.msg);\n    });\n    // I could delete the relevant list from the state and have the site update that way\n    // probably more efficient\n\n    // thought this was taking care of the state update\n    history.push('/saved');\n    history.go(0);\n\n    // just reroute. no need to change state.\n    //setData([]);\n  }\n\n  function onWordDel(menuVal) {\n    //send doc id when words are put in list\n    //need listName as well - get from location\n    // setWordData([{ spelling: 'only i survived' }]);\n    var wordMongoId = menuVal.key;\n    var values = { docID: wordMongoId, phoneID: 2, listName: locationArray[3] };\n    instance.post('/deleteword', values).then((result) => {\n      console.log(result.data.msg);\n    });\n\n    const wordToDel = (object) => object.id === wordMongoId;\n    var i = wordData.findIndex(wordToDel);\n    wordData.splice(i, 1);\n    history.go(0);\n    // console.log('word data before set', wordData);\n    // setWordData(wordData);\n    // console.log('word data after', wordData);\n  }\n\n  return (\n    <div style={{ height: '100%', width: '100%' }} className=\"saved-page\">\n      <Row style={{ height: '100%' }}>\n        <Col span={5} className=\"list-column\">\n          <InfiniteScroll>\n            <Row style={{ paddingLeft:\"20px\", marginTop: '20px' }}>\n              {/* <Title level={5} style={{ color: '#001529', fontSize: '14px' }}> */}\n              <Title level={4} style={{ color: '#001529' }}>\n                LISTS\n              </Title>\n            </Row>\n            <Row className=\"list-padding\">\n              <List\n                className=\"list-words lists\"\n                dataSource={data}\n                renderItem={(item) => (\n                  <List.Item\n                    style={{ border: '0px' }}\n                    extra={\n                      // <Button size=\"small\" onClick={onListDel}>\n                      //   ...\n                      // </Button>\n                      <Dropdown.Button\n                        className=\"more-button\"\n                        overlay={\n                          <Menu onClick={onListDel}>\n                            <Menu.Item key={item.title}>Delete</Menu.Item>\n                          </Menu>\n                        }\n                        trigger={['click']}\n                        type=\"link\"\n                      />\n                    }\n                  >\n                    <List.Item.Meta\n                      // To Do: phoneId ('2') will not be hardcoded in final product\n                      title={\n                        <a\n                          href={'/saved/' + '2/' + item.title}\n                          style={{ color: '#001529' }}\n                        >\n                          {item.title}\n                        </a>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            </Row>\n          </InfiniteScroll>\n        </Col>\n\n        <Col span={19}>\n          <InfiniteScroll>\n            {listRender ? (\n              <div>\n                <Row style={{ marginTop: '65px' }}>\n                  <Col span={8}></Col>\n                  <Col span={8}>\n                    <Row justify=\"center\">\n                      <Title level={2}>{selectedList}</Title>\n                    </Row>\n                  </Col>\n                  <Col span={8}></Col>\n                  {/* <Title level={3} style={{ paddingLeft: '200px' }}>\n                    {selectedList}\n                  </Title> */}\n                </Row>\n                <Row>\n                  <List\n                    split={false}\n                    className=\"words\"\n                    dataSource={wordData}\n                    renderItem={(item) => (\n                      <List.Item\n                        extra={\n                          // <Button size=\"small\" onClick={onListDel}>\n                          //   ...\n                          // </Button>\n                          <Dropdown.Button\n                            overlay={\n                              <Menu onClick={onWordDel}>\n                                <Menu.Item key={item.id}>Delete</Menu.Item>\n                              </Menu>\n                            }\n                            trigger={['click']}\n                            type=\"text\"\n                          />\n                        }\n                      >\n                        <List.Item.Meta title={item.spelling} />\n                      </List.Item>\n                    )}\n                  />\n                </Row>\n              </div>\n            ) : (\n              <Row></Row>\n            )}\n          </InfiniteScroll>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default SavedWords;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js",["130"],"import { React, useEffect, useState } from 'react';\nimport { Modal, Checkbox, Divider, Row, Col, Form, Button, Input } from 'antd';\nimport axios from 'axios';\nimport { PropertySafetyFilled } from '@ant-design/icons';\nimport '../HomePageStyle.css';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\n\n// const options = [\n//   {\n//     label: 'Lord of The Rings',\n//     value: '2',\n//   },\n//   {\n//     label: 'SAT Words',\n//     value: '4',\n//   },\n// ];\n\n// interface ISaveModalProps{\n//   boolean visible;\n\n// }\n\n// function onChange(values) {\n//   console.log('pickedValues:', values);\n// }\n\nfunction SaveWordModal(props) {\n  const [modalOptions, setModalOptions] = useState([]);\n  var selectedOptions = [];\n\n  useEffect(() => {\n    var listOptions = [];\n    var val = 0;\n    var name;\n    // get lists\n    instance.get('/lists').then((result) => {\n      console.log(result.data);\n      for (name of result.data.lists) {\n        listOptions.push({ label: name, value: val });\n        val += 1;\n      }\n      // console.log(listOptions);\n      setModalOptions(listOptions);\n      // console.log('modal options:', modalOptions);\n    });\n  }, []);\n\n  // You can have state here that gets updated by the props in parent\n  // but can also update itself\n\n  // console.log('SaveWordModal visible', visible);\n\n  const onCreateList = (values) => {\n    // var list\n    // var newListOptions;\n    // // modalOptions.push({\n    // //   label: values.listName,\n    // //   value: modalOptions.length,\n    // // });\n    // // newList = modalOptions;\n    // for (list of modalOptions){\n    //   newListOptions.push(list)\n    // }\n\n    setModalOptions(\n      modalOptions.push({ label: values.listName, value: modalOptions.length })\n    );\n    setModalOptions(modalOptions);\n  };\n\n  function onChange(values) {\n    selectedOptions = values;\n    // console.log('selected:', selectedOptions);\n    // console.log('pickedValues:', values);\n  }\n\n  // to keep saved\n  // will gave to retrieve lists a word is saved to each time it's queried and set those as default selections\n  function onSave() {\n    // console.log('docID:', props.mongoDocId);\n    var listNames = [];\n    // index of list based on checkbox values\n    var listIndex;\n    for (listIndex of selectedOptions) {\n      listNames.push(modalOptions[listIndex].label);\n    }\n    // console.log('listNames:', listNames);\n    var values = { mongoId: props.mongoDocId, lists: listNames };\n    instance.post('/save', values);\n  }\n\n  return (\n    <Modal\n      visible={props.visible}\n      onCancel={props.handleCancel}\n      footer={null}\n      destroyOnClose={true}\n    >\n      <Checkbox.Group options={modalOptions} onChange={onChange} />\n      <Divider />\n      <Row>\n        <Col span={4}>\n          <Button type=\"primary\" onClick={onSave}>\n            Save\n          </Button>\n        </Col>\n        <Col span={20}>\n          <Form name=\"createList\" onFinish={onCreateList}>\n            <Row justify=\"end\">\n              <Col style={{ marginRight: '5px' }}>\n                <Form.Item name=\"listName\">\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Create New List\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </Col>\n      </Row>\n    </Modal>\n  );\n}\n\nexport default SaveWordModal;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/Tests/Lists.js",["131","132"],"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Skeleton, List } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport { StarOutlined, LikeoutLined, MessageOutlined } from '@ant-design/icons';\n\n// const IconText = ({ type, text }) => (\n//   <span>\n//     <Icon type={type} style={{ marginRight: 8 }} />\n//     {text}\n//   </span>\n// );\n\n// IconText.propTypes = {\n//   type: PropTypes.string,\n//   text: PropTypes.string,\n// };\n\nconst data = [\n  {\n    title: 'Ant Design Title 1',\n    id: 1,\n  },\n  {\n    title: 'Ant Design Title 2',\n    id: 2,\n  },\n];\nclass Feed extends React.Component {\n  render() {\n    return (\n      <div>\n        <List\n          itemLayout=\"vertical\"\n          size=\"large\"\n          //   dataSource={this.props.things}\n          dataSource={data}\n          renderItem={(item) => (\n            <List.Item\n              key={item.title}\n              actions={\n                !this.props.loading && [\n                  <StarOutlined />,\n                  //   <IconText key=\"2\" type=\"like-o\" text=\"156\" />,\n                  //   <IconText key=\"3\" type=\"message\" text={item.commentsCount} />,\n                ]\n              }\n            >\n              <Skeleton loading={this.props.loading} active>\n                <List.Item.Meta\n                  title={<Link to={`/${item.id}`}>{item.title}</Link>}\n                  description={item.headline}\n                />\n                {/* {item.body} */}\n              </Skeleton>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nFeed.propTypes = {\n  things: PropTypes.array,\n  loading: PropTypes.bool,\n};\n\nexport default Feed;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/App/frontend/src/modules/History/History.js",["133","134","135","136","137","138","139"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/index.js",[],["140","141"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/reportWebVitals.js",[],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/App.js",["142","143","144","145","146","147"],"import { React, useState } from 'react';\nimport {\n  Switch,\n  Route,\n  BrowserRouter,\n  Redirect,\n  useLocation,\n  useHistory,\n  Link,\n} from 'react-router-dom';\nimport { Menu, Layout, Typography } from 'antd';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport Home from './modules/HomePage/Home';\nimport SavedWords from './modules/SavedWordsPage/SavedWords';\nimport History from './modules/History/History';\nimport AddWordModal from './modules/HomePage/subcomponents/SaveWordModal';\nimport Feed from './modules/Tests/Lists';\n\nconst { Header, Content, Footer } = Layout;\nconst { Text } = Typography;\n// the question is what format is the form information being sent in from react\n// it will be sent in a get from here\n// to a get in the backend\n// then the res will have the definition\n// first step is to send the request from here\nfunction App() {\n  let location = useLocation();\n  console.log('location:', location);\n  // let history = useHistory()\n  console.log('location:', location.pathname.split('/'));\n\n  const onMenuClick = (e) => {\n    // console.log('key', e.key);\n  };\n\n  return (\n    <Layout className=\"main-component-layout\">\n      <Header class=\"header-cross-site\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          style={{ lineHeight: '64px' }}\n          onClick={onMenuClick}\n          selectedKeys={[location.pathname.split('/')[1]]}\n        >\n          <Menu.Item key=\"home\">\n            <Link to=\"/home\">SISWATI TO ENGLISH DICTIONARY</Link>\n          </Menu.Item>\n          <Menu.Item key=\"saved\">\n            <Link to=\"/saved\">Saved Words</Link>\n          </Menu.Item>\n          <Menu.Item key=\"history\" style={{ float: 'right' }}>\n            <Link to=\"/history\">History</Link>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      {/* <BrowserRouter> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n        <Route path=\"/home\" component={Home} />;\n        <Route path=\"/saved\" component={SavedWords} />;\n        <Route path=\"/saved/:phoneid/:list\" component={SavedWords} />;\n        <Route path=\"/history\" component={History} />;\n        {/* <Route path=\"/modaltest\" component={AddWordModal} />;\n          <Route path=\"/test\" component={Feed} /> */}\n      </Switch>\n      {/* </BrowserRouter> */}\n\n      <Footer className=\"footer\">\n        <Text className=\"menu-text-color\">©2021 Created by Ndabe Mahluza</Text>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/SavedWordsPage/SavedWords.js",["148","149","150","151","152"],"import { React, useEffect, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport {\n  List,\n  Row,\n  Col,\n  Typography,\n  Button,\n  Select,\n  Menu,\n  Dropdown,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport axios from 'axios';\n\nimport './SavedWords.css';\n\n// const instance = axios.create({ baseURL: 'http://localhost:5000' });\nconst { Title } = Typography;\nconst { Option } = Select;\n\n// const data = [\n//   {\n//     title: 'Ant Design Title 1',\n//   },\n//   {\n//     title: 'Ant Design Title 2',\n//   },\n// ];\nconst listNames = [];\nconst words = [];\n\nfunction SavedWords() {\n  const [data, setData] = useState([]);\n  const [wordData, setWordData] = useState([]);\n  const [selectedList, setSelectedList] = useState('');\n  const [listRender, setListRender] = useState(false);\n  // const menu = (\n  //   <Menu onClick={onListDel}>\n  //     <Menu.Item key={0}>Delete</Menu.Item>\n  //   </Menu>\n  // );\n  //\n  const history = useHistory();\n  var location = useLocation();\n  var locationArray = location.pathname.split('/');\n  console.log('url:', location.pathname);\n\n  useEffect(() => {\n    axios.get('/lists').then((result) => {\n      //console.log('result1:', result.data.lists);\n      var name;\n      for (name of result.data.lists) {\n        listNames.push({ title: name });\n      }\n\n      setData(listNames);\n      // console.log('data:', data);\n      // itereate\n      // create object with title in it\n      // put\n    });\n\n    console.log('url size:', locationArray.length);\n    // if a list has been selected\n    if (locationArray.length > 2) {\n      var listName = locationArray[3];\n      setSelectedList(listName);\n      setListRender(true);\n      var values = { phoneId: 2, listName: listName };\n      axios.post('/getwords', values).then((result) => {\n        console.log('result2:', result.data.words);\n        var doc;\n        for (doc of result.data.words) {\n          words.push({ id: doc._id, spelling: doc.word });\n        }\n\n        setWordData(words);\n        console.log('data2:', wordData);\n        // itereate\n        // create object with title in it\n        // put\n      });\n    }\n  }, []);\n\n  function onListDel(menuVal) {\n    console.log(menuVal);\n\n    var values = { phoneID: 2, listName: menuVal.key };\n    axios.post('/listdel', values).then((result) => {\n      console.log(result.data.msg);\n    });\n    // I could delete the relevant list from the state and have the site update that way\n    // probably more efficient\n\n    // thought this was taking care of the state update\n    history.push('/saved');\n    history.go(0);\n\n    // just reroute. no need to change state.\n    //setData([]);\n  }\n\n  function onWordDel(menuVal) {\n    //send doc id when words are put in list\n    //need listName as well - get from location\n    // setWordData([{ spelling: 'only i survived' }]);\n    var wordMongoId = menuVal.key;\n    var values = { docID: wordMongoId, phoneID: 2, listName: locationArray[3] };\n    axios.post('/deleteword', values).then((result) => {\n      console.log(result.data.msg);\n    });\n\n    const wordToDel = (object) => object.id === wordMongoId;\n    var i = wordData.findIndex(wordToDel);\n    wordData.splice(i, 1);\n    history.go(0);\n    // console.log('word data before set', wordData);\n    // setWordData(wordData);\n    // console.log('word data after', wordData);\n  }\n\n  return (\n    <div style={{ height: '100%', width: '100%' }} className=\"saved-page\">\n      <Row style={{ height: '100%' }}>\n        <Col span={5} className=\"list-column\">\n          <InfiniteScroll>\n            <Row style={{ paddingLeft: '20px', marginTop: '20px' }}>\n              {/* <Title level={5} style={{ color: '#001529', fontSize: '14px' }}> */}\n              <Title level={4} style={{ color: '#001529' }}>\n                LISTS\n              </Title>\n            </Row>\n            <Row className=\"list-padding\">\n              <List\n                className=\"list-words lists\"\n                dataSource={data}\n                renderItem={(item) => (\n                  <List.Item\n                    style={{ border: '0px' }}\n                    extra={\n                      // <Button size=\"small\" onClick={onListDel}>\n                      //   ...\n                      // </Button>\n                      <Dropdown.Button\n                        className=\"more-button\"\n                        overlay={\n                          <Menu onClick={onListDel}>\n                            <Menu.Item key={item.title}>Delete</Menu.Item>\n                          </Menu>\n                        }\n                        trigger={['click']}\n                        type=\"link\"\n                      />\n                    }\n                  >\n                    <List.Item.Meta\n                      // To Do: phoneId ('2') will not be hardcoded in final product\n                      title={\n                        <a\n                          href={'/saved/' + '2/' + item.title}\n                          style={{ color: '#001529' }}\n                        >\n                          {item.title}\n                        </a>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            </Row>\n          </InfiniteScroll>\n        </Col>\n\n        <Col span={19}>\n          <InfiniteScroll>\n            {listRender ? (\n              <div>\n                <Row style={{ marginTop: '65px' }}>\n                  <Col span={8}></Col>\n                  <Col span={8}>\n                    <Row justify=\"center\">\n                      <Title level={2}>{selectedList}</Title>\n                    </Row>\n                  </Col>\n                  <Col span={8}></Col>\n                  {/* <Title level={3} style={{ paddingLeft: '200px' }}>\n                    {selectedList}\n                  </Title> */}\n                </Row>\n                <Row>\n                  <List\n                    split={false}\n                    className=\"words\"\n                    dataSource={wordData}\n                    renderItem={(item) => (\n                      <List.Item\n                        extra={\n                          // <Button size=\"small\" onClick={onListDel}>\n                          //   ...\n                          // </Button>\n                          <Dropdown.Button\n                            overlay={\n                              <Menu onClick={onWordDel}>\n                                <Menu.Item key={item.id}>Delete</Menu.Item>\n                              </Menu>\n                            }\n                            trigger={['click']}\n                            type=\"text\"\n                          />\n                        }\n                      >\n                        <List.Item.Meta title={item.spelling} />\n                      </List.Item>\n                    )}\n                  />\n                </Row>\n              </div>\n            ) : (\n              <Row></Row>\n            )}\n          </InfiniteScroll>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default SavedWords;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js",["153"],"import { React, useEffect, useState } from 'react';\nimport { Modal, Checkbox, Divider, Row, Col, Form, Button, Input } from 'antd';\nimport axios from 'axios';\nimport { PropertySafetyFilled } from '@ant-design/icons';\nimport '../HomePageStyle.css';\n\n// // const instance = axios.create({ baseURL: 'http://localhost:5000' });\n\n// const options = [\n//   {\n//     label: 'Lord of The Rings',\n//     value: '2',\n//   },\n//   {\n//     label: 'SAT Words',\n//     value: '4',\n//   },\n// ];\n\n// interface ISaveModalProps{\n//   boolean visible;\n\n// }\n\n// function onChange(values) {\n//   console.log('pickedValues:', values);\n// }\n\nfunction SaveWordModal(props) {\n  const [modalOptions, setModalOptions] = useState([]);\n  var selectedOptions = [];\n\n  useEffect(() => {\n    var listOptions = [];\n    var val = 0;\n    var name;\n    // get lists\n    axios.get('/lists').then((result) => {\n      console.log(result.data);\n      for (name of result.data.lists) {\n        listOptions.push({ label: name, value: val });\n        val += 1;\n      }\n      // console.log(listOptions);\n      setModalOptions(listOptions);\n      // console.log('modal options:', modalOptions);\n    });\n  }, []);\n\n  // You can have state here that gets updated by the props in parent\n  // but can also update itself\n\n  // console.log('SaveWordModal visible', visible);\n\n  const onCreateList = (values) => {\n    // var list\n    // var newListOptions;\n    // // modalOptions.push({\n    // //   label: values.listName,\n    // //   value: modalOptions.length,\n    // // });\n    // // newList = modalOptions;\n    // for (list of modalOptions){\n    //   newListOptions.push(list)\n    // }\n\n    setModalOptions(\n      modalOptions.push({ label: values.listName, value: modalOptions.length })\n    );\n    setModalOptions(modalOptions);\n  };\n\n  function onChange(values) {\n    selectedOptions = values;\n    // console.log('selected:', selectedOptions);\n    // console.log('pickedValues:', values);\n  }\n\n  // to keep saved\n  // will gave to retrieve lists a word is saved to each time it's queried and set those as default selections\n  function onSave() {\n    // console.log('docID:', props.mongoDocId);\n    var listNames = [];\n    // index of list based on checkbox values\n    var listIndex;\n    for (listIndex of selectedOptions) {\n      listNames.push(modalOptions[listIndex].label);\n    }\n    // console.log('listNames:', listNames);\n    var values = { mongoId: props.mongoDocId, lists: listNames };\n    axios.post('/save', values);\n  }\n\n  return (\n    <Modal\n      visible={props.visible}\n      onCancel={props.handleCancel}\n      footer={null}\n      destroyOnClose={true}\n    >\n      <Checkbox.Group options={modalOptions} onChange={onChange} />\n      <Divider />\n      <Row>\n        <Col span={4}>\n          <Button type=\"primary\" onClick={onSave}>\n            Save\n          </Button>\n        </Col>\n        <Col span={20}>\n          <Form name=\"createList\" onFinish={onCreateList}>\n            <Row justify=\"end\">\n              <Col style={{ marginRight: '5px' }}>\n                <Form.Item name=\"listName\">\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Create New List\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </Col>\n      </Row>\n    </Modal>\n  );\n}\n\nexport default SaveWordModal;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/HomePage/Home.js",["154","155","156","157","158"],"import { React, useEffect, useState } from 'react';\nimport {\n  Row,\n  Col,\n  Typography,\n  Form,\n  Input,\n  Button,\n  Radio,\n  Alert,\n  Select,\n} from 'antd';\nimport axios from 'axios';\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport SaveWordModal from './subcomponents/SaveWordModal';\nimport './HomePageStyle.css';\n\n// const instance = axios.create({\n//   baseURL: 'http://localhost:' + process.env.PORT,\n// });\n\nconst { Title, Text } = Typography;\n\nconst options = [{ value: 'gold' }];\n\nfunction Home() {\n  const [wordInfo, setWordInfo] = useState({});\n  const [defVisible, setDefVisible] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [saveHidden, setSaveHidden] = useState(true);\n  const [notFoundError, setNotFound] = useState('');\n  const [showNotFound, setShowNf] = useState(false);\n  // const [modalOptions, setModalOptions] = useState([]);\n\n  //   useEffect(() => {\n  //     instance\n  //       .get('/definition').then((result) => {\n  //       console.log(result);\n  //       setWordInfo(result.data);\n  //     });\n  //   });\n\n  // {\n  //   headers: { 'Content-Type': 'application/json' },\n  // }\n\n  // save\n  // borderless button\n  // popup modal\n  // checkboxes to add to multiple\n  // give option for only one?\n  // table\n  // list\n  // radio buttons\n  // success message\n\n  // adding a list item would both have to add the list to the word in the database and trigger a\n  // message that says the words has been added\n\n  // to know if added\n  // word would have to have a state that gets toggle\n  // would require a change in database perhaps\n  const onFinish = (values) => {\n    console.log('values:', values);\n    axios.post('/definition', values).then((result) => {\n      console.log('result:', result.data);\n\n      switch (result.data.type) {\n        case 'n':\n          result.data.type = 'noun';\n          break;\n        case 'conj':\n          result.data.type = 'conjunction';\n          break;\n        case 'adv':\n          result.data.type = 'adjective';\n          break;\n        case 'interj':\n          result.data.type = 'interjection';\n          break;\n        case 'qual':\n          result.data.type = 'qualificative';\n          break;\n        case 'v':\n          result.data.type = 'verb';\n          break;\n        case 'pron':\n          result.data.type = 'pronoun';\n          break;\n        default:\n          break;\n      }\n\n      // if error msg present, don't set to false and make visible\n      if (!('errMsg' in result.data)) {\n        setSaveHidden(false);\n        setShowNf(false);\n        // defType will depend on condition in future\n        result.data.defType = 'Siswati Definition';\n      } else {\n        setNotFound(result.data.errMsg);\n        setShowNf(true);\n        setSaveHidden(true);\n      }\n      setWordInfo(result.data);\n      // console.log('wordInfo:', wordInfo);\n      // should you push to home\n      // or is useEffect necessary\n    });\n  };\n\n  const onSave = () => {\n    // var listOptions = [];\n    // var val = 0;\n    // var name;\n    // // get lists\n    // instance.get('/lists').then((result) => {\n    //   console.log(result.data);\n    //   for (name of result.data.lists) {\n    //     listOptions.push({ label: name, value: val });\n    //     val += 1;\n    //   }\n    //   // console.log(listOptions);\n    //   setModalOptions(listOptions);\n    //   console.log('modal options:', modalOptions);\n    // });\n\n    // other info needed: docID, phoneID, listID, listName, addDate & createDate (can be added automatically)\n    // get docID from when word is queried\n\n    // is listId necessary\n    // no, if a phoneId exists in a document that's enough\n    // phone id hardcoded so already have\n    // phoneid doesn't have to be hardcoded coz then how do you change it (To do)\n    // opp to use redux\n    // find out how to send values in get\n\n    setShowModal(true);\n  };\n\n  // destroy modal on cancel\n  const onCancel = () => {\n    setShowModal(false);\n  };\n\n  // function onChange(values) {\n  //   console.log('pickedValues:', values);\n  // }\n\n  //console.log('showModal:', showModal);\n  // To do: radio button plumbing hasn't been implemented\n  return (\n    <div>\n      <Row justify=\"center\" align=\"middle\" style={{ height: '50px' }}>\n        {showNotFound ? (\n          <Alert\n            style={{ height: '26px' }}\n            message={notFoundError}\n            type=\"error\"\n          ></Alert>\n        ) : (\n          <div></div>\n        )}\n      </Row>\n      <Row justify=\"center\">\n        <Title level={2}>Search for a Word</Title>\n      </Row>\n      <Row justify=\"center\">\n        <Radio.Group defaultValue=\"english\">\n          <Radio.Button value=\"english\">English to Siswati</Radio.Button>\n          <Radio.Button value=\"siswati\" disabled>\n            Siswati to English\n          </Radio.Button>\n        </Radio.Group>\n        {/* <Col>\n          <Button type=\"primary\">English to Siswati</Button>\n        </Col>\n        <Col>\n          <Button type=\"primary\">Siswati to English</Button>\n        </Col> */}\n      </Row>\n      <Row justify=\"center\" style={{ marginTop: '10px' }}>\n        <Form name=\"wordToSearch\" onFinish={onFinish}>\n          <Row>\n            <Col>\n              <Form.Item name=\"word\">\n                <Input className=\"input-dimensions\" />\n              </Form.Item>\n            </Col>\n            <Col>\n              <Form.Item>\n                <Button\n                  htmlType=\"submit\"\n                  icon={<SearchOutlined style={{ fontSize: '25px' }} />}\n                  style={{ height: '50px', width: '50px' }}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n      <Row>\n        <Col span={2}></Col>\n        <Col span={12}>\n          <Row>\n            <Title level={1} style={{ marginBottom: '10px' }}>\n              {wordInfo.word}\n            </Title>\n          </Row>\n          <Row>\n            <Button\n              type=\"link\"\n              style={{\n                fontSize: '18px',\n                paddingLeft: '20px',\n                marginBottom: '10px',\n                border: '0px',\n              }}\n              onClick={onSave}\n              hidden={saveHidden}\n            >\n              Save\n            </Button>\n            <SaveWordModal\n              visible={showModal}\n              handleCancel={onCancel}\n              mongoDocId={wordInfo.docID}\n              // save will ultimated appear only when a word is searched\n              // onChange={onChange}\n            />\n            {/* <Select placeholder=\"Save\" bordered={false} showArrow={false} /> */}\n          </Row>\n          <Row style={{ paddingLeft: '20px' }}>\n            <Title level={3}>{wordInfo.type}</Title>\n          </Row>\n          <Row style={{ paddingLeft: '40px' }}>\n            {/* <Col style={{marginLeft:\"-150px\"}}>\n            <Title level={5}>SiSwati Def:</Title>\n            </Col> */}\n            <Title level={5}>{wordInfo.defType}</Title>\n          </Row>\n          <Row style={{ paddingLeft: '60px' }}>\n            <Text style={{ fontSize: '16px' }}>{wordInfo.def}</Text>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Home;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/Tests/Lists.js",["159","160"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-new/server/frontend/src/modules/History/History.js",["161","162","163","164","165","166","167"],"import { React, useState, useEffect } from 'react';\nimport {\n  Row,\n  Col,\n  Typography,\n  List,\n  Form,\n  Input,\n  Button,\n  Calendar,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './History.css';\nimport { useHistory } from 'react-router-dom';\n\n// const instance = axios.create({ baseURL: 'http://localhost:5000' });\nconst { Title } = Typography;\nvar data = [];\n// require('datejs');\nfunction History() {\n  // console.log(Date.today());\n  const [history, setHistory] = useState([]);\n  const [itemWord, setItemWord] = useState('checking');\n  const pageHistory = useHistory();\n  // console.log('itemWord', itemWord);\n  function onDel(values) {\n    console.log('on delete values', values);\n    axios.post('/history', { word: values.word }).then((result) => {});\n    // pageHistory.push('/history');\n    pageHistory.go(0);\n    // console.log('event id', event.target.id);\n  }\n  useEffect(() => {\n    axios.get('/history').then((result) => {\n      // console.log('get history result:', result);\n      var n = result.data.history.length;\n      var historyArray = result.data.history;\n      var i;\n      var date;\n      for (i = 0; i < n; i += 2) {\n        date = new Date(parseInt(historyArray[i + 1])).toDateString();\n        console.log(date);\n        let [weekDay, month, day, year] = date.split(' ');\n        data.push({\n          word: historyArray[i],\n          date: { month: month, day: day, year: year },\n        });\n      }\n      // console.log('data', data);\n\n      setHistory(data);\n      // var d = parseInt(data[0].date);\n      // console.log('original:', data[0].date);\n      // console.log('converted:', d);\n      // var d1 = new Date(d);\n      // console.log('date obj:', d1.toDateString());\n    });\n  }, []);\n  return (\n    <div className=\"history-page\">\n      <Row justify=\"center\" className=\"heading-row\">\n        <Title level={1} className=\"heading\">\n          {' '}\n          History\n        </Title>\n      </Row>\n      <Row style={{ marginTop: '25px' }}>\n        {/* <InfiniteScroll> */}\n        <List\n          split={false}\n          className=\"history\"\n          dataSource={history}\n          renderItem={(item) => (\n            <List.Item\n              extra={\n                <Form\n                  name=\"wordHistoryName\"\n                  initialValues={item.word}\n                  onFinish={onDel}\n                >\n                  <Form.Item\n                    name=\"word\"\n                    initialValue={item.word}\n                    hidden={true}\n                  />\n\n                  <Form.Item className=\"align-icon\">\n                    <Button\n                      id={item.word}\n                      icon={<DeleteOutlined />}\n                      type=\"text\"\n                      htmlType=\"submit\"\n                    />\n                  </Form.Item>\n                </Form>\n              }\n            >\n              <List.Item.Meta\n                title={item.word}\n                description={\n                  item.date.month + ' ' + item.date.day + ', ' + item.date.year\n                }\n              />\n            </List.Item>\n          )}\n        />\n        {/* </InfiniteScroll> */}\n      </Row>\n    </div>\n  );\n}\n\nexport default History;\n","/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/index.js",[],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/reportWebVitals.js",[],["168","169"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/App.js",["170","171","172","173","174","175"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/HomePage/Home.js",[],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/SavedWordsPage/SavedWords.js",["176","177"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/History/History.js",["178","179"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/Tests/Lists.js",["180","181"],"/Users/macuser/Documents/Projects/SiswatiDictionary/app-final/final-eng-siswati-dictionary/frontend/src/modules/HomePage/subcomponents/SaveWordModal.js",[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"190","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":16},{"ruleId":"186","severity":1,"message":"191","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":13},{"ruleId":"186","severity":1,"message":"192","line":18,"column":8,"nodeType":"188","messageId":"189","endLine":18,"endColumn":20},{"ruleId":"186","severity":1,"message":"193","line":19,"column":8,"nodeType":"188","messageId":"189","endLine":19,"endColumn":12},{"ruleId":"186","severity":1,"message":"194","line":21,"column":17,"nodeType":"188","messageId":"189","endLine":21,"endColumn":24},{"ruleId":"186","severity":1,"message":"195","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"196","line":11,"column":3,"nodeType":"188","messageId":"189","endLine":11,"endColumn":9},{"ruleId":"186","severity":1,"message":"197","line":23,"column":7,"nodeType":"188","messageId":"189","endLine":23,"endColumn":14},{"ruleId":"186","severity":1,"message":"198","line":27,"column":10,"nodeType":"188","messageId":"189","endLine":27,"endColumn":20},{"ruleId":"186","severity":1,"message":"199","line":27,"column":22,"nodeType":"188","messageId":"189","endLine":27,"endColumn":35},{"ruleId":"186","severity":1,"message":"200","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":9},{"ruleId":"186","severity":1,"message":"201","line":13,"column":10,"nodeType":"188","messageId":"189","endLine":13,"endColumn":24},{"ruleId":"186","severity":1,"message":"202","line":21,"column":9,"nodeType":"188","messageId":"189","endLine":21,"endColumn":15},{"ruleId":"203","severity":1,"message":"204","line":86,"column":6,"nodeType":"205","endLine":86,"endColumn":8,"suggestions":"206"},{"ruleId":"207","severity":1,"message":"208","line":163,"column":43,"nodeType":"209","messageId":"210","endLine":163,"endColumn":44},{"ruleId":"186","severity":1,"message":"211","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":30},{"ruleId":"186","severity":1,"message":"212","line":7,"column":24,"nodeType":"188","messageId":"189","endLine":7,"endColumn":36},{"ruleId":"186","severity":1,"message":"213","line":7,"column":38,"nodeType":"188","messageId":"189","endLine":7,"endColumn":53},{"ruleId":"186","severity":1,"message":"214","line":4,"column":3,"nodeType":"188","messageId":"189","endLine":4,"endColumn":6},{"ruleId":"186","severity":1,"message":"215","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":8},{"ruleId":"186","severity":1,"message":"216","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":11},{"ruleId":"186","severity":1,"message":"217","line":14,"column":8,"nodeType":"188","messageId":"189","endLine":14,"endColumn":22},{"ruleId":"186","severity":1,"message":"218","line":26,"column":10,"nodeType":"188","messageId":"189","endLine":26,"endColumn":18},{"ruleId":"186","severity":1,"message":"219","line":26,"column":20,"nodeType":"188","messageId":"189","endLine":26,"endColumn":31},{"ruleId":"186","severity":1,"message":"220","line":46,"column":14,"nodeType":"188","messageId":"189","endLine":46,"endColumn":21},{"ruleId":"182","replacedBy":"221"},{"ruleId":"184","replacedBy":"222"},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"190","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":16},{"ruleId":"186","severity":1,"message":"191","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":13},{"ruleId":"186","severity":1,"message":"192","line":19,"column":8,"nodeType":"188","messageId":"189","endLine":19,"endColumn":20},{"ruleId":"186","severity":1,"message":"193","line":20,"column":8,"nodeType":"188","messageId":"189","endLine":20,"endColumn":12},{"ruleId":"186","severity":1,"message":"194","line":22,"column":17,"nodeType":"188","messageId":"189","endLine":22,"endColumn":24},{"ruleId":"186","severity":1,"message":"200","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":9},{"ruleId":"186","severity":1,"message":"201","line":13,"column":10,"nodeType":"188","messageId":"189","endLine":13,"endColumn":24},{"ruleId":"186","severity":1,"message":"202","line":21,"column":9,"nodeType":"188","messageId":"189","endLine":21,"endColumn":15},{"ruleId":"203","severity":1,"message":"204","line":86,"column":6,"nodeType":"205","endLine":86,"endColumn":8,"suggestions":"223"},{"ruleId":"207","severity":1,"message":"208","line":163,"column":43,"nodeType":"209","messageId":"210","endLine":163,"endColumn":44},{"ruleId":"186","severity":1,"message":"211","line":4,"column":10,"nodeType":"188","messageId":"189","endLine":4,"endColumn":30},{"ruleId":"186","severity":1,"message":"195","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":26},{"ruleId":"186","severity":1,"message":"196","line":11,"column":3,"nodeType":"188","messageId":"189","endLine":11,"endColumn":9},{"ruleId":"186","severity":1,"message":"197","line":25,"column":7,"nodeType":"188","messageId":"189","endLine":25,"endColumn":14},{"ruleId":"186","severity":1,"message":"198","line":29,"column":10,"nodeType":"188","messageId":"189","endLine":29,"endColumn":20},{"ruleId":"186","severity":1,"message":"199","line":29,"column":22,"nodeType":"188","messageId":"189","endLine":29,"endColumn":35},{"ruleId":"186","severity":1,"message":"212","line":7,"column":24,"nodeType":"188","messageId":"189","endLine":7,"endColumn":36},{"ruleId":"186","severity":1,"message":"213","line":7,"column":38,"nodeType":"188","messageId":"189","endLine":7,"endColumn":53},{"ruleId":"186","severity":1,"message":"214","line":4,"column":3,"nodeType":"188","messageId":"189","endLine":4,"endColumn":6},{"ruleId":"186","severity":1,"message":"215","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":8},{"ruleId":"186","severity":1,"message":"216","line":10,"column":3,"nodeType":"188","messageId":"189","endLine":10,"endColumn":11},{"ruleId":"186","severity":1,"message":"217","line":14,"column":8,"nodeType":"188","messageId":"189","endLine":14,"endColumn":22},{"ruleId":"186","severity":1,"message":"218","line":26,"column":10,"nodeType":"188","messageId":"189","endLine":26,"endColumn":18},{"ruleId":"186","severity":1,"message":"219","line":26,"column":20,"nodeType":"188","messageId":"189","endLine":26,"endColumn":31},{"ruleId":"186","severity":1,"message":"220","line":46,"column":14,"nodeType":"188","messageId":"189","endLine":46,"endColumn":21},{"ruleId":"182","replacedBy":"224"},{"ruleId":"184","replacedBy":"225"},{"ruleId":"186","severity":1,"message":"187","line":1,"column":17,"nodeType":"188","messageId":"189","endLine":1,"endColumn":25},{"ruleId":"186","severity":1,"message":"190","line":5,"column":3,"nodeType":"188","messageId":"189","endLine":5,"endColumn":16},{"ruleId":"186","severity":1,"message":"191","line":8,"column":3,"nodeType":"188","messageId":"189","endLine":8,"endColumn":13},{"ruleId":"186","severity":1,"message":"192","line":19,"column":8,"nodeType":"188","messageId":"189","endLine":19,"endColumn":20},{"ruleId":"186","severity":1,"message":"193","line":20,"column":8,"nodeType":"188","messageId":"189","endLine":20,"endColumn":12},{"ruleId":"186","severity":1,"message":"194","line":22,"column":17,"nodeType":"188","messageId":"189","endLine":22,"endColumn":24},{"ruleId":"203","severity":1,"message":"226","line":51,"column":6,"nodeType":"205","endLine":51,"endColumn":8,"suggestions":"227"},{"ruleId":"207","severity":1,"message":"208","line":106,"column":43,"nodeType":"209","messageId":"210","endLine":106,"endColumn":44},{"ruleId":"186","severity":1,"message":"220","line":29,"column":14,"nodeType":"188","messageId":"189","endLine":29,"endColumn":21},{"ruleId":"203","severity":1,"message":"228","line":38,"column":6,"nodeType":"205","endLine":38,"endColumn":8,"suggestions":"229"},{"ruleId":"186","severity":1,"message":"212","line":7,"column":24,"nodeType":"188","messageId":"189","endLine":7,"endColumn":36},{"ruleId":"186","severity":1,"message":"213","line":7,"column":38,"nodeType":"188","messageId":"189","endLine":7,"endColumn":53},"no-native-reassign",["230"],"no-negated-in-lhs",["231"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'BrowserRouter' is defined but never used.","'useHistory' is defined but never used.","'AddWordModal' is defined but never used.","'Feed' is defined but never used.","'Content' is assigned a value but never used.","'useEffect' is defined but never used.","'Select' is defined but never used.","'options' is assigned a value but never used.","'defVisible' is assigned a value but never used.","'setDefVisible' is assigned a value but never used.","'Button' is defined but never used.","'DeleteOutlined' is defined but never used.","'Option' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'locationArray' and 'wordData'. Either include them or remove the dependency array.","ArrayExpression",["232"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'PropertySafetyFilled' is defined but never used.","'LikeoutLined' is defined but never used.","'MessageOutlined' is defined but never used.","'Col' is defined but never used.","'Input' is defined but never used.","'Calendar' is defined but never used.","'InfiniteScroll' is defined but never used.","'itemWord' is assigned a value but never used.","'setItemWord' is assigned a value but never used.","'weekDay' is assigned a value but never used.",["230"],["231"],["233"],["230"],["231"],"React Hook useEffect has missing dependencies: 'listNames' and 'locationArray'. Either include them or remove the dependency array.",["234"],"React Hook useEffect has a missing dependency: 'data'. Either include it or remove the dependency array.",["235"],"no-global-assign","no-unsafe-negation",{"desc":"236","fix":"237"},{"desc":"236","fix":"238"},{"desc":"239","fix":"240"},{"desc":"241","fix":"242"},"Update the dependencies array to be: [locationArray, wordData]",{"range":"243","text":"244"},{"range":"245","text":"244"},"Update the dependencies array to be: [listNames, locationArray]",{"range":"246","text":"247"},"Update the dependencies array to be: [data]",{"range":"248","text":"249"},[2230,2232],"[locationArray, wordData]",[2227,2229],[1377,1379],"[listNames, locationArray]",[1073,1075],"[data]"]