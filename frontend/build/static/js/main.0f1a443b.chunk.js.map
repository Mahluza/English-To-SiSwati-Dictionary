{"version":3,"sources":["modules/HomePage/subcomponents/SaveWordModal.js","modules/HomePage/Home.js","modules/SavedWordsPage/SavedWords.js","modules/History/History.js","modules/Tests/Lists.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","SaveWordModal","props","useState","modalOptions","setModalOptions","selectedOptions","useEffect","name","listOptions","val","get","then","result","console","log","data","lists","push","label","value","visible","onCancel","handleCancel","footer","destroyOnClose","Group","options","onChange","values","span","type","onClick","listIndex","listNames","mongoId","mongoDocId","post","onFinish","listName","length","justify","style","marginRight","Item","htmlType","Title","Typography","Text","Home","wordInfo","setWordInfo","showModal","setShowModal","saveHidden","setSaveHidden","notFoundError","setNotFound","showNotFound","setShowNf","align","height","message","level","defaultValue","Button","disabled","marginTop","errMsg","defType","className","icon","SearchOutlined","fontSize","width","marginBottom","word","paddingLeft","border","hidden","docID","def","Select","Option","words","SavedWords","setData","wordData","setWordData","selectedList","setSelectedList","listRender","setListRender","history","useHistory","location","useLocation","locationArray","pathname","split","onListDel","menuVal","phoneID","key","msg","go","onWordDel","wordMongoId","i","findIndex","object","id","splice","title","phoneId","doc","_id","spelling","color","dataSource","renderItem","item","extra","overlay","trigger","Meta","href","History","setHistory","pageHistory","onDel","date","n","historyArray","Date","parseInt","toDateString","month","day","year","initialValues","initialValue","DeleteOutlined","description","Header","React","Component","Layout","Footer","Content","App","class","theme","mode","lineHeight","e","selectedKeys","float","exact","path","to","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f1a443b.chunk.js","sourcesContent":["import { React, useEffect, useState } from 'react';\nimport { Modal, Checkbox, Divider, Row, Col, Form, Button, Input } from 'antd';\nimport axios from 'axios';\nimport { PropertySafetyFilled } from '@ant-design/icons';\nimport '../HomePageStyle.css';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\n\n// const options = [\n//   {\n//     label: 'Lord of The Rings',\n//     value: '2',\n//   },\n//   {\n//     label: 'SAT Words',\n//     value: '4',\n//   },\n// ];\n\n// interface ISaveModalProps{\n//   boolean visible;\n\n// }\n\n// function onChange(values) {\n//   console.log('pickedValues:', values);\n// }\n\nfunction SaveWordModal(props) {\n  const [modalOptions, setModalOptions] = useState([]);\n  var selectedOptions = [];\n\n  useEffect(() => {\n    var listOptions = [];\n    var val = 0;\n    var name;\n    // get lists\n    instance.get('/lists').then((result) => {\n      console.log(result.data);\n      for (name of result.data.lists) {\n        listOptions.push({ label: name, value: val });\n        val += 1;\n      }\n      // console.log(listOptions);\n      setModalOptions(listOptions);\n      // console.log('modal options:', modalOptions);\n    });\n  }, []);\n\n  // You can have state here that gets updated by the props in parent\n  // but can also update itself\n\n  // console.log('SaveWordModal visible', visible);\n\n  const onCreateList = (values) => {\n    // var list\n    // var newListOptions;\n    // // modalOptions.push({\n    // //   label: values.listName,\n    // //   value: modalOptions.length,\n    // // });\n    // // newList = modalOptions;\n    // for (list of modalOptions){\n    //   newListOptions.push(list)\n    // }\n\n    setModalOptions(\n      modalOptions.push({ label: values.listName, value: modalOptions.length })\n    );\n    setModalOptions(modalOptions);\n  };\n\n  function onChange(values) {\n    selectedOptions = values;\n    // console.log('selected:', selectedOptions);\n    // console.log('pickedValues:', values);\n  }\n\n  // to keep saved\n  // will gave to retrieve lists a word is saved to each time it's queried and set those as default selections\n  function onSave() {\n    // console.log('docID:', props.mongoDocId);\n    var listNames = [];\n    // index of list based on checkbox values\n    var listIndex;\n    for (listIndex of selectedOptions) {\n      listNames.push(modalOptions[listIndex].label);\n    }\n    // console.log('listNames:', listNames);\n    var values = { mongoId: props.mongoDocId, lists: listNames };\n    instance.post('/save', values);\n  }\n\n  return (\n    <Modal\n      visible={props.visible}\n      onCancel={props.handleCancel}\n      footer={null}\n      destroyOnClose={true}\n    >\n      <Checkbox.Group options={modalOptions} onChange={onChange} />\n      <Divider />\n      <Row>\n        <Col span={4}>\n          <Button type=\"primary\" onClick={onSave}>\n            Save\n          </Button>\n        </Col>\n        <Col span={20}>\n          <Form name=\"createList\" onFinish={onCreateList}>\n            <Row justify=\"end\">\n              <Col style={{ marginRight: '5px' }}>\n                <Form.Item name=\"listName\">\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col>\n                <Form.Item>\n                  <Button type=\"primary\" htmlType=\"submit\">\n                    Create New List\n                  </Button>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </Col>\n      </Row>\n    </Modal>\n  );\n}\n\nexport default SaveWordModal;\n","import { React, useEffect, useState } from 'react';\nimport {\n  Row,\n  Col,\n  Typography,\n  Form,\n  Input,\n  Button,\n  Radio,\n  Alert,\n  Select,\n} from 'antd';\nimport axios from 'axios';\nimport { SearchOutlined } from '@ant-design/icons';\n\nimport SaveWordModal from './subcomponents/SaveWordModal';\nimport './HomePageStyle.css';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\n\nconst { Title, Text } = Typography;\n\nconst options = [{ value: 'gold' }];\n\nfunction Home() {\n  const [wordInfo, setWordInfo] = useState({});\n  const [defVisible, setDefVisible] = useState({});\n  const [showModal, setShowModal] = useState(false);\n  const [saveHidden, setSaveHidden] = useState(true);\n  const [notFoundError, setNotFound] = useState('');\n  const [showNotFound, setShowNf] = useState(false);\n  // const [modalOptions, setModalOptions] = useState([]);\n\n  //   useEffect(() => {\n  //     instance\n  //       .get('/definition').then((result) => {\n  //       console.log(result);\n  //       setWordInfo(result.data);\n  //     });\n  //   });\n\n  // {\n  //   headers: { 'Content-Type': 'application/json' },\n  // }\n\n  // save\n  // borderless button\n  // popup modal\n  // checkboxes to add to multiple\n  // give option for only one?\n  // table\n  // list\n  // radio buttons\n  // success message\n\n  // adding a list item would both have to add the list to the word in the database and trigger a\n  // message that says the words has been added\n\n  // to know if added\n  // word would have to have a state that gets toggle\n  // would require a change in database perhaps\n  const onFinish = (values) => {\n    console.log('values:', values);\n    instance.post('/definition', values).then((result) => {\n      console.log('result:', result.data);\n\n      switch (result.data.type) {\n        case 'n':\n          result.data.type = 'noun';\n          break;\n        case 'conj':\n          result.data.type = 'conjunction';\n          break;\n        case 'adv':\n          result.data.type = 'adjective';\n          break;\n        case 'interj':\n          result.data.type = 'interjection';\n          break;\n        case 'qual':\n          result.data.type = 'qualificative';\n          break;\n        case 'v':\n          result.data.type = 'verb';\n          break;\n        case 'pron':\n          result.data.type = 'pronoun';\n          break;\n        default:\n          break;\n      }\n\n      // if error msg present, don't set to false and make visible\n      if (!('errMsg' in result.data)) {\n        setSaveHidden(false);\n        setShowNf(false);\n        // defType will depend on condition in future\n        result.data.defType = 'Siswati Definition';\n      } else {\n        setNotFound(result.data.errMsg);\n        setShowNf(true);\n        setSaveHidden(true);\n      }\n      setWordInfo(result.data);\n      // console.log('wordInfo:', wordInfo);\n      // should you push to home\n      // or is useEffect necessary\n    });\n  };\n\n  const onSave = () => {\n    // var listOptions = [];\n    // var val = 0;\n    // var name;\n    // // get lists\n    // instance.get('/lists').then((result) => {\n    //   console.log(result.data);\n    //   for (name of result.data.lists) {\n    //     listOptions.push({ label: name, value: val });\n    //     val += 1;\n    //   }\n    //   // console.log(listOptions);\n    //   setModalOptions(listOptions);\n    //   console.log('modal options:', modalOptions);\n    // });\n\n    // other info needed: docID, phoneID, listID, listName, addDate & createDate (can be added automatically)\n    // get docID from when word is queried\n\n    // is listId necessary\n    // no, if a phoneId exists in a document that's enough\n    // phone id hardcoded so already have\n    // phoneid doesn't have to be hardcoded coz then how do you change it (To do)\n    // opp to use redux\n    // find out how to send values in get\n\n    setShowModal(true);\n  };\n\n  // destroy modal on cancel\n  const onCancel = () => {\n    setShowModal(false);\n  };\n\n  // function onChange(values) {\n  //   console.log('pickedValues:', values);\n  // }\n\n  //console.log('showModal:', showModal);\n  // To do: radio button plumbing hasn't been implemented\n  return (\n    <div>\n      <Row justify=\"center\" align=\"middle\" style={{ height: '50px' }}>\n        {showNotFound ? (\n          <Alert\n            style={{ height: '26px' }}\n            message={notFoundError}\n            type=\"error\"\n          ></Alert>\n        ) : (\n          <div></div>\n        )}\n      </Row>\n      <Row justify=\"center\">\n        <Title level={2}>Search for a Word</Title>\n      </Row>\n      <Row justify=\"center\">\n        <Radio.Group defaultValue=\"english\">\n          <Radio.Button value=\"english\">English to Siswati</Radio.Button>\n          <Radio.Button value=\"siswati\" disabled>\n            Siswati to English\n          </Radio.Button>\n        </Radio.Group>\n        {/* <Col>\n          <Button type=\"primary\">English to Siswati</Button>\n        </Col>\n        <Col>\n          <Button type=\"primary\">Siswati to English</Button>\n        </Col> */}\n      </Row>\n      <Row justify=\"center\" style={{ marginTop: '10px' }}>\n        <Form name=\"wordToSearch\" onFinish={onFinish}>\n          <Row>\n            <Col>\n              <Form.Item name=\"word\">\n                <Input className=\"input-dimensions\" />\n              </Form.Item>\n            </Col>\n            <Col>\n              <Form.Item>\n                <Button\n                  htmlType=\"submit\"\n                  icon={<SearchOutlined style={{ fontSize: '25px' }} />}\n                  style={{ height: '50px', width: '50px' }}\n                />\n              </Form.Item>\n            </Col>\n          </Row>\n        </Form>\n      </Row>\n      <Row>\n        <Col span={2}></Col>\n        <Col span={12}>\n          <Row>\n            <Title level={1} style={{ marginBottom: '10px' }}>\n              {wordInfo.word}\n            </Title>\n          </Row>\n          <Row>\n            <Button\n              type=\"link\"\n              style={{\n                fontSize: '18px',\n                paddingLeft: '20px',\n                marginBottom: '10px',\n                border: '0px',\n              }}\n              onClick={onSave}\n              hidden={saveHidden}\n            >\n              Save\n            </Button>\n            <SaveWordModal\n              visible={showModal}\n              handleCancel={onCancel}\n              mongoDocId={wordInfo.docID}\n              // save will ultimated appear only when a word is searched\n              // onChange={onChange}\n            />\n            {/* <Select placeholder=\"Save\" bordered={false} showArrow={false} /> */}\n          </Row>\n          <Row style={{ paddingLeft: '20px' }}>\n            <Title level={3}>{wordInfo.type}</Title>\n          </Row>\n          <Row style={{ paddingLeft: '40px' }}>\n            {/* <Col style={{marginLeft:\"-150px\"}}>\n            <Title level={5}>SiSwati Def:</Title>\n            </Col> */}\n            <Title level={5}>{wordInfo.defType}</Title>\n          </Row>\n          <Row style={{ paddingLeft: '60px' }}>\n            <Text style={{ fontSize: '16px' }}>{wordInfo.def}</Text>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default Home;\n","import { React, useEffect, useState } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport {\n  List,\n  Row,\n  Col,\n  Typography,\n  Button,\n  Select,\n  Menu,\n  Dropdown,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport axios from 'axios';\n\nimport './SavedWords.css';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\nconst { Title } = Typography;\nconst { Option } = Select;\n\n// const data = [\n//   {\n//     title: 'Ant Design Title 1',\n//   },\n//   {\n//     title: 'Ant Design Title 2',\n//   },\n// ];\nconst listNames = [];\nconst words = [];\n\nfunction SavedWords() {\n  const [data, setData] = useState([]);\n  const [wordData, setWordData] = useState([]);\n  const [selectedList, setSelectedList] = useState('');\n  const [listRender, setListRender] = useState(false);\n  // const menu = (\n  //   <Menu onClick={onListDel}>\n  //     <Menu.Item key={0}>Delete</Menu.Item>\n  //   </Menu>\n  // );\n  //\n  const history = useHistory();\n  var location = useLocation();\n  var locationArray = location.pathname.split('/');\n  console.log('url:', location.pathname);\n\n  useEffect(() => {\n    instance.get('/lists').then((result) => {\n      //console.log('result1:', result.data.lists);\n      var name;\n      for (name of result.data.lists) {\n        listNames.push({ title: name });\n      }\n\n      setData(listNames);\n      // console.log('data:', data);\n      // itereate\n      // create object with title in it\n      // put\n    });\n\n    console.log('url size:', locationArray.length);\n    // if a list has been selected\n    if (locationArray.length > 2) {\n      var listName = locationArray[3];\n      setSelectedList(listName);\n      setListRender(true);\n      var values = { phoneId: 2, listName: listName };\n      instance.post('/getwords', values).then((result) => {\n        console.log('result2:', result.data.words);\n        var doc;\n        for (doc of result.data.words) {\n          words.push({ id: doc._id, spelling: doc.word });\n        }\n\n        setWordData(words);\n        console.log('data2:', wordData);\n        // itereate\n        // create object with title in it\n        // put\n      });\n    }\n  }, []);\n\n  function onListDel(menuVal) {\n    console.log(menuVal);\n\n    var values = { phoneID: 2, listName: menuVal.key };\n    instance.post('/listdel', values).then((result) => {\n      console.log(result.data.msg);\n    });\n    // I could delete the relevant list from the state and have the site update that way\n    // probably more efficient\n\n    // thought this was taking care of the state update\n    history.push('/saved');\n    history.go(0);\n\n    // just reroute. no need to change state.\n    //setData([]);\n  }\n\n  function onWordDel(menuVal) {\n    //send doc id when words are put in list\n    //need listName as well - get from location\n    // setWordData([{ spelling: 'only i survived' }]);\n    var wordMongoId = menuVal.key;\n    var values = { docID: wordMongoId, phoneID: 2, listName: locationArray[3] };\n    instance.post('/deleteword', values).then((result) => {\n      console.log(result.data.msg);\n    });\n\n    const wordToDel = (object) => object.id === wordMongoId;\n    var i = wordData.findIndex(wordToDel);\n    wordData.splice(i, 1);\n    history.go(0);\n    // console.log('word data before set', wordData);\n    // setWordData(wordData);\n    // console.log('word data after', wordData);\n  }\n\n  return (\n    <div style={{ height: '100%', width: '100%' }} className=\"saved-page\">\n      <Row style={{ height: '100%' }}>\n        <Col span={5} className=\"list-column\">\n          <InfiniteScroll>\n            <Row style={{ paddingLeft:\"20px\", marginTop: '20px' }}>\n              {/* <Title level={5} style={{ color: '#001529', fontSize: '14px' }}> */}\n              <Title level={4} style={{ color: '#001529' }}>\n                LISTS\n              </Title>\n            </Row>\n            <Row className=\"list-padding\">\n              <List\n                className=\"list-words lists\"\n                dataSource={data}\n                renderItem={(item) => (\n                  <List.Item\n                    style={{ border: '0px' }}\n                    extra={\n                      // <Button size=\"small\" onClick={onListDel}>\n                      //   ...\n                      // </Button>\n                      <Dropdown.Button\n                        className=\"more-button\"\n                        overlay={\n                          <Menu onClick={onListDel}>\n                            <Menu.Item key={item.title}>Delete</Menu.Item>\n                          </Menu>\n                        }\n                        trigger={['click']}\n                        type=\"link\"\n                      />\n                    }\n                  >\n                    <List.Item.Meta\n                      // To Do: phoneId ('2') will not be hardcoded in final product\n                      title={\n                        <a\n                          href={'/saved/' + '2/' + item.title}\n                          style={{ color: '#001529' }}\n                        >\n                          {item.title}\n                        </a>\n                      }\n                    />\n                  </List.Item>\n                )}\n              />\n            </Row>\n          </InfiniteScroll>\n        </Col>\n\n        <Col span={19}>\n          <InfiniteScroll>\n            {listRender ? (\n              <div>\n                <Row style={{ marginTop: '65px' }}>\n                  <Col span={8}></Col>\n                  <Col span={8}>\n                    <Row justify=\"center\">\n                      <Title level={2}>{selectedList}</Title>\n                    </Row>\n                  </Col>\n                  <Col span={8}></Col>\n                  {/* <Title level={3} style={{ paddingLeft: '200px' }}>\n                    {selectedList}\n                  </Title> */}\n                </Row>\n                <Row>\n                  <List\n                    split={false}\n                    className=\"words\"\n                    dataSource={wordData}\n                    renderItem={(item) => (\n                      <List.Item\n                        extra={\n                          // <Button size=\"small\" onClick={onListDel}>\n                          //   ...\n                          // </Button>\n                          <Dropdown.Button\n                            overlay={\n                              <Menu onClick={onWordDel}>\n                                <Menu.Item key={item.id}>Delete</Menu.Item>\n                              </Menu>\n                            }\n                            trigger={['click']}\n                            type=\"text\"\n                          />\n                        }\n                      >\n                        <List.Item.Meta title={item.spelling} />\n                      </List.Item>\n                    )}\n                  />\n                </Row>\n              </div>\n            ) : (\n              <Row></Row>\n            )}\n          </InfiniteScroll>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default SavedWords;\n","import { React, useState, useEffect } from 'react';\nimport {\n  Row,\n  Col,\n  Typography,\n  List,\n  Form,\n  Input,\n  Button,\n  Calendar,\n} from 'antd';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport axios from 'axios';\nimport InfiniteScroll from 'react-infinite-scroller';\n\nimport './History.css';\nimport { useHistory } from 'react-router-dom';\n\nconst instance = axios.create({ baseURL: 'http://localhost:5000' });\nconst { Title } = Typography;\nvar data = [];\n// require('datejs');\nfunction History() {\n  // console.log(Date.today());\n  const [history, setHistory] = useState([]);\n  const [itemWord, setItemWord] = useState('checking');\n  const pageHistory = useHistory();\n  // console.log('itemWord', itemWord);\n  function onDel(values) {\n    console.log('on delete values', values);\n    instance.post('/history', { word: values.word }).then((result) => {});\n    // pageHistory.push('/history');\n    pageHistory.go(0);\n    // console.log('event id', event.target.id);\n  }\n  useEffect(() => {\n    instance.get('/history').then((result) => {\n      // console.log('get history result:', result);\n      var n = result.data.history.length;\n      var historyArray = result.data.history;\n      var i;\n      var date;\n      for (i = 0; i < n; i += 2) {\n        date = new Date(parseInt(historyArray[i + 1])).toDateString();\n        console.log(date);\n        let [weekDay, month, day, year] = date.split(' ');\n        data.push({\n          word: historyArray[i],\n          date: { month: month, day: day, year: year },\n        });\n      }\n      // console.log('data', data);\n\n      setHistory(data);\n      // var d = parseInt(data[0].date);\n      // console.log('original:', data[0].date);\n      // console.log('converted:', d);\n      // var d1 = new Date(d);\n      // console.log('date obj:', d1.toDateString());\n    });\n  }, []);\n  return (\n    <div className=\"history-page\">\n      <Row justify=\"center\" className=\"heading-row\">\n        <Title level={1} className=\"heading\">\n          {' '}\n          History\n        </Title>\n      </Row>\n      <Row style={{ marginTop: '25px' }}>\n        {/* <InfiniteScroll> */}\n        <List\n          split={false}\n          className=\"history\"\n          dataSource={history}\n          renderItem={(item) => (\n            <List.Item\n              extra={\n                <Form\n                  name=\"wordHistoryName\"\n                  initialValues={item.word}\n                  onFinish={onDel}\n                >\n                  <Form.Item\n                    name=\"word\"\n                    initialValue={item.word}\n                    hidden={true}\n                  />\n\n                  <Form.Item className=\"align-icon\">\n                    <Button\n                      id={item.word}\n                      icon={<DeleteOutlined />}\n                      type=\"text\"\n                      htmlType=\"submit\"\n                    />\n                  </Form.Item>\n                </Form>\n              }\n            >\n              <List.Item.Meta\n                title={item.word}\n                description={\n                  item.date.month + ' ' + item.date.day + ', ' + item.date.year\n                }\n              />\n            </List.Item>\n          )}\n        />\n        {/* </InfiniteScroll> */}\n      </Row>\n    </div>\n  );\n}\n\nexport default History;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Skeleton, List } from 'antd';\nimport 'antd/dist/antd.css';\n\nimport { StarOutlined, LikeoutLined, MessageOutlined } from '@ant-design/icons';\n\n// const IconText = ({ type, text }) => (\n//   <span>\n//     <Icon type={type} style={{ marginRight: 8 }} />\n//     {text}\n//   </span>\n// );\n\n// IconText.propTypes = {\n//   type: PropTypes.string,\n//   text: PropTypes.string,\n// };\n\nconst data = [\n  {\n    title: 'Ant Design Title 1',\n    id: 1,\n  },\n  {\n    title: 'Ant Design Title 2',\n    id: 2,\n  },\n];\nclass Feed extends React.Component {\n  render() {\n    return (\n      <div>\n        <List\n          itemLayout=\"vertical\"\n          size=\"large\"\n          //   dataSource={this.props.things}\n          dataSource={data}\n          renderItem={(item) => (\n            <List.Item\n              key={item.title}\n              actions={\n                !this.props.loading && [\n                  <StarOutlined />,\n                  //   <IconText key=\"2\" type=\"like-o\" text=\"156\" />,\n                  //   <IconText key=\"3\" type=\"message\" text={item.commentsCount} />,\n                ]\n              }\n            >\n              <Skeleton loading={this.props.loading} active>\n                <List.Item.Meta\n                  title={<Link to={`/${item.id}`}>{item.title}</Link>}\n                  description={item.headline}\n                />\n                {/* {item.body} */}\n              </Skeleton>\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n}\n\nFeed.propTypes = {\n  things: PropTypes.array,\n  loading: PropTypes.bool,\n};\n\nexport default Feed;\n","import { React, useState } from 'react';\nimport {\n  Switch,\n  Route,\n  BrowserRouter,\n  Redirect,\n  useLocation,\n  useHistory,\n} from 'react-router-dom';\nimport { Menu, Layout, Typography } from 'antd';\n\nimport './App.css';\nimport 'antd/dist/antd.css';\n\nimport Home from './modules/HomePage/Home';\nimport SavedWords from './modules/SavedWordsPage/SavedWords';\nimport History from './modules/History/History';\nimport AddWordModal from './modules/HomePage/subcomponents/SaveWordModal';\nimport Feed from './modules/Tests/Lists';\n\nconst { Header, Content, Footer } = Layout;\nconst { Text } = Typography;\n// the question is what format is the form information being sent in from react\n// it will be sent in a get from here\n// to a get in the backend\n// then the res will have the definition\n// first step is to send the request from here\nfunction App() {\n  let location = useLocation();\n  console.log('location:', location);\n  // let history = useHistory()\n  console.log('location:', location.pathname.split('/'));\n\n  const onMenuClick = (e) => {\n    // console.log('key', e.key);\n  };\n\n  return (\n    <Layout className=\"main-component-layout\">\n      <Header class=\"header-cross-site\">\n        <Menu\n          theme=\"dark\"\n          mode=\"horizontal\"\n          style={{ lineHeight: '64px' }}\n          onClick={onMenuClick}\n          selectedKeys={[location.pathname.split('/')[1]]}\n        >\n          <Menu.Item key=\"home\">\n            <a href=\"http://localhost:3000/home\">\n              SISWATI TO ENGLISH DICTIONARY\n            </a>\n          </Menu.Item>\n          <Menu.Item key=\"saved\">\n            <a href=\"http://localhost:3000/saved\">Saved Words</a>\n          </Menu.Item>\n          <Menu.Item key=\"history\" style={{ float: 'right' }}>\n            <a href=\"http://localhost:3000/history\">History</a>\n          </Menu.Item>\n        </Menu>\n      </Header>\n      {/* <BrowserRouter> */}\n      <Switch>\n        <Route exact path=\"/\">\n          <Redirect to=\"/home\" />\n        </Route>\n        <Route path=\"/home\" component={Home} />;\n        <Route path=\"/saved\" component={SavedWords} />;\n        <Route path=\"/saved/:list\" component={SavedWords} />;\n        <Route path=\"/history\" component={History} />;\n        {/* <Route path=\"/modaltest\" component={AddWordModal} />;\n          <Route path=\"/test\" component={Feed} /> */}\n      </Switch>\n      {/* </BrowserRouter> */}\n\n      <Footer className=\"footer\">\n        <Text className=\"menu-text-color\">©2021 Created by Ndabe Mahluza</Text>\n      </Footer>\n    </Layout>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}